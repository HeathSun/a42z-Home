"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { ExternalLink, MessageSquare, Sparkles } from 'lucide-react';
import { cn } from '@/lib/utils';

interface AnswerDisplayProps {
  answer: string;
  judgeName?: string;
  className?: string;
  isVisible?: boolean;
}

export function AnswerDisplay({ 
  answer, 
  judgeName = "AI Judge",
  className,
  isVisible = true 
}: AnswerDisplayProps) {
  // 处理换行符和链接
  const processText = (text: string) => {
    // 检测链接的正则表达式
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    
    // 按换行符分割
    const lines = text.split('\n');
    
    return lines.map((line, lineIndex) => {
      // 检查这一行是否包含链接
      const parts = line.split(urlRegex);
      
      return (
        <div key={lineIndex} className="mb-2">
          {parts.map((part, partIndex) => {
            if (urlRegex.test(part)) {
              // 这是一个链接
              return (
                <a
                  key={partIndex}
                  href={part}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-flex items-center gap-1 text-blue-400 hover:text-blue-300 transition-colors duration-200 underline decoration-blue-400/50 hover:decoration-blue-300/70"
                >
                  {part}
                  <ExternalLink className="w-3 h-3" />
                </a>
              );
            } else {
              // 这是普通文本
              return part;
            }
          })}
        </div>
      );
    });
  };

  if (!isVisible) return null;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20, scale: 0.95 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      transition={{ 
        duration: 0.6, 
        ease: [0.25, 0.46, 0.45, 0.94],
        delay: 0.2
      }}
      className={cn(
        "relative overflow-hidden",
        className
      )}
    >
      {/* 背景装饰 */}
      <div className="absolute inset-0 bg-gradient-to-br from-purple-900/20 via-blue-900/20 to-cyan-900/20 rounded-lg" />
      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent animate-pulse" />
      
      {/* 主容器 */}
      <div className="relative bg-black/40 backdrop-blur-sm border border-white/20 rounded-lg p-6 shadow-2xl">
        {/* 头部 */}
        <div className="flex items-center gap-3 mb-4 pb-4 border-b border-white/10">
          <div className="flex items-center justify-center w-10 h-10 bg-gradient-to-br from-purple-500 to-blue-500 rounded-lg shadow-lg">
            <MessageSquare className="w-5 h-5 text-white" />
          </div>
          <div>
            <h3 className="text-white font-semibold text-lg">{judgeName}</h3>
            <div className="flex items-center gap-2 text-sm text-gray-400">
              <Sparkles className="w-4 h-4" />
              <span>AI Analysis Response</span>
            </div>
          </div>
        </div>

        {/* 内容区域 */}
        <div className="relative">
          {/* 内容背景 */}
          <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent rounded-lg" />
          
          {/* 文本内容 */}
          <div className="relative text-gray-200 leading-relaxed font-['Noto_Sans_SC']">
            {processText(answer)}
          </div>
        </div>

        {/* 底部装饰 */}
        <div className="mt-4 pt-4 border-t border-white/10">
          <div className="flex items-center justify-between text-xs text-gray-500">
            <span>Generated by AI Judge System</span>
            <div className="flex items-center gap-1">
              <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
              <span>Real-time Analysis</span>
            </div>
          </div>
        </div>
      </div>

      {/* 外发光效果 */}
      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 via-blue-500/20 to-cyan-500/20 rounded-lg blur-xl -z-10" />
    </motion.div>
  );
}

// 简化的内联版本
export function InlineAnswerDisplay({ 
  answer, 
  className 
}: { 
  answer: string; 
  className?: string; 
}) {
  const processText = (text: string) => {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const lines = text.split('\n');
    
    return lines.map((line, lineIndex) => {
      const parts = line.split(urlRegex);
      
      return (
        <div key={lineIndex} className="mb-1">
          {parts.map((part, partIndex) => {
            if (urlRegex.test(part)) {
              return (
                <a
                  key={partIndex}
                  href={part}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-flex items-center gap-1 text-blue-400 hover:text-blue-300 transition-colors duration-200 underline"
                >
                  {part}
                  <ExternalLink className="w-3 h-3" />
                </a>
              );
            } else {
              return part;
            }
          })}
        </div>
      );
    });
  };

  return (
    <div className={cn("text-gray-200 leading-relaxed", className)}>
      {processText(answer)}
    </div>
  );
} 